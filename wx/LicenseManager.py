#!/usr/bin/env python
# vim:set et sts=4 sw=4:
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Thu Jun 24 11:47:26 2010

import wx,os,re,string
import uuid

# begin wxGlade: extracode
# end wxGlade



class LicenseManager(wx.Dialog):
    def __init__(self):
        # begin wxGlade: LicenseManager.__init__
        wx.Dialog.__init__(self, None,-1)
        self.sizer_info_staticbox = wx.StaticBox(self, -1, _("License info"))
        self.label_licenseInfo = wx.StaticText(self, -1, _("infotext"))
        self.static_line_1 = wx.StaticLine(self, -1)
        self.label_current_key = wx.StaticText(self, -1, _(""), style=wx.ALIGN_CENTRE)
        self.button_input = wx.Button(self, -1, _("ImPort"))
        self.text_ctrl_key1 = wx.TextCtrl(self, -1, "")
        self.label_1 = wx.StaticText(self, -1, _("-"))
        self.text_ctrl_key2 = wx.TextCtrl(self, -1, "")
        self.label_2 = wx.StaticText(self, -1, _("-"))
        self.text_ctrl_key3 = wx.TextCtrl(self, -1, "")
        self.label_3 = wx.StaticText(self, -1, _("-"))
        self.text_ctrl_key4 = wx.TextCtrl(self, -1, "")
        self.label_4 = wx.StaticText(self, -1, _("-"))
        self.text_ctrl_key5 = wx.TextCtrl(self, -1, "")
        self.label_5 = wx.StaticText(self, -1, _("-"))
        self.text_ctrl_key6 = wx.TextCtrl(self, -1, "")
        self.static_line_key = wx.StaticLine(self, -1, style=wx.LI_VERTICAL)
        self.button_add_key = wx.Button(self, -1, _("Add"))
        self.button_cancel = wx.Button(self, wx.ID_CANCEL, _("Cancel"))
        self.button_Apply = wx.Button(self, wx.ID_APPLY, _("Apply"))
        
        # Data
	self.__max_company_count = 2
	self.__supported_company={0:["",""],\

		1:["2010","5f83","5953","001c","9c3a","c16e",_("Yuansheng Corp.,ltd")],\
		2:["2010","5f83","5953","0013","c6fe","ee74",_("Laser Center of SS.SWUST")]}
	
	# Which license id.
	self.ActivedCompanyID = 0

        self.licenseMessage=""
        self.currentLicense=""
        self.key1=""
        self.key2=""
        self.key3=""
        self.key4=""
        self.key5=""
        self.key6=""

	# whether the uuid is match
	self.UUIDmatch = 0

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.evt_On_input_key_pressed, self.button_input)
        self.Bind(wx.EVT_BUTTON, self.evt_OnAddkey, self.button_add_key)
        self.Bind(wx.EVT_BUTTON, self.evt_On_Cancel, self.button_cancel)
        self.Bind(wx.EVT_BUTTON, self.evt_On_Apply, self.button_Apply)

        # hide the input key box default
        self.hide_input_keybox()

        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: LicenseManager.__set_properties
        self.SetTitle(_("License Manager"))
        self.SetSize((423, 271))
        self.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        self.text_ctrl_key1.SetMinSize((50, 27))
        self.text_ctrl_key2.SetMinSize((50, 27))
        self.text_ctrl_key3.SetMinSize((50, 27))
        self.text_ctrl_key4.SetMinSize((50, 27))
        self.text_ctrl_key5.SetMinSize((50, 27))
        self.text_ctrl_key6.SetMinSize((50, 27))
        self.static_line_key.SetMinSize((2, 30))
        self.button_add_key.SetMinSize((60, 28))
        self.button_input.SetMinSize((70, 28))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: LicenseManager.__do_layout
        sizer_main = wx.BoxSizer(wx.VERTICAL)
        sizer_licensebutton = wx.BoxSizer(wx.HORIZONTAL)
        sizer_info = wx.StaticBoxSizer(self.sizer_info_staticbox, wx.VERTICAL)
        sizer_licensekey = wx.BoxSizer(wx.VERTICAL)
        sizer_key_box = wx.BoxSizer(wx.HORIZONTAL)
        sizer_inputkey = wx.BoxSizer(wx.HORIZONTAL)
        sizer_info.Add(self.label_licenseInfo , 2, 0, 0)
        sizer_info.Add(self.static_line_1, 0, wx.EXPAND, 0)
        sizer_inputkey.Add(self.label_current_key, 0, wx.EXPAND|wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 4)
        sizer_inputkey.Add(self.button_input, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL,20)
        sizer_licensekey.Add(sizer_inputkey, 1, wx.EXPAND, 0)
        sizer_key_box.Add(self.text_ctrl_key1, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_key_box.Add(self.label_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_key_box.Add(self.text_ctrl_key2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_key_box.Add(self.label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_key_box.Add(self.text_ctrl_key3, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_key_box.Add(self.label_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_key_box.Add(self.text_ctrl_key4, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_key_box.Add(self.label_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_key_box.Add(self.text_ctrl_key5, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_key_box.Add(self.label_5, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_key_box.Add(self.text_ctrl_key6, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_key_box.Add(self.static_line_key, 0, wx.EXPAND, 0)
        sizer_key_box.Add(self.button_add_key, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_licensekey.Add(sizer_key_box, 1, wx.EXPAND, 0)
        sizer_info.Add(sizer_licensekey, 1, wx.EXPAND, 0)
        sizer_main.Add(sizer_info, 1, wx.ALL|wx.EXPAND, 4)
        sizer_licensebutton.Add((120, 20), 0, 0, 0)
        sizer_licensebutton.Add(self.button_cancel, 0, wx.TOP|wx.BOTTOM, 2)
        sizer_licensebutton.Add(self.button_Apply, 0, wx.TOP|wx.BOTTOM, 2)
        sizer_main.Add(sizer_licensebutton, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_main)
        self.Layout()
        self.Centre()
        # end wxGlade

    def evt_On_input_key_pressed(self, event):
        self.show_input_keybox()

    def evt_OnAddkey(self, event):
        self.key1=self.text_ctrl_key1.GetValue()
        self.key2=self.text_ctrl_key2.GetValue()
        self.key3=self.text_ctrl_key3.GetValue()
        self.key4=self.text_ctrl_key4.GetValue()
        self.key5=self.text_ctrl_key5.GetValue()
        self.key6=self.text_ctrl_key6.GetValue()
	self.currentLicense="%s-%s-%s-%s-%s-%s" \
			%(self.key1,\
			  self.key2,\
			  self.key3,\
			  self.key4,\
			  self.key5,\
			  self.key6)

	self.ActivedCompanyID = 0
	for ID in range(1,self.__max_company_count+1):
		license_by_ID =	"%s-%s-%s-%s-%s-%s" \
		%(self.__supported_company[ID][0],\
		  self.__supported_company[ID][1],\
		  self.__supported_company[ID][2],\
		  self.__supported_company[ID][3],\
		  self.__supported_company[ID][4],\
		  self.__supported_company[ID][5])
		if (self.currentLicense == license_by_ID ):
			self.ActivedCompanyID = ID
			break
		else:
			continue
	if  self.ActivedCompanyID:
		okDialog=wx.MessageDialog(None,_("Imported key successfully!"),_("Message"),wx.OK)	
		okDialog.ShowModal()
		self.hide_input_keybox()
	else:
		errorDialog=wx.MessageDialog(None,_("Invalid key!"),_("Error"),wx.OK|wx.ICON_ERROR)	
		errorDialog.ShowModal()

    def evt_On_Cancel(self, event):
	self.EndModal(self.ActivedCompanyID)

    def evt_On_Apply(self, event):
	if self.ActivedCompanyID:
		self.update_licenseInfo()
		self.EndModal(self.ActivedCompanyID)
	else:
		self.ActivedCompanyID = 0
		self.UUIDmatch = 0
		self.update_licenseInfo()
		self.EndModal(self.ActivedCompanyID)

    def show_input_keybox(self):
        self.text_ctrl_key1.Show()
        self.label_1.Show()
        self.text_ctrl_key2.Show()
        self.label_2.Show()
        self.text_ctrl_key3.Show()
        self.label_3.Show()
        self.text_ctrl_key4.Show()
        self.label_4.Show()
        self.text_ctrl_key5.Show()
        self.label_5.Show()
        self.text_ctrl_key6.Show()
        self.static_line_key.Show()
        self.button_add_key.Show()        
	self.Layout()
       
    def hide_input_keybox(self):
        self.text_ctrl_key1.Hide()
        self.label_1.Hide()
        self.text_ctrl_key2.Hide()
        self.label_2.Hide()
        self.text_ctrl_key3.Hide()
        self.label_3.Hide()
        self.text_ctrl_key4.Hide()
        self.label_4.Hide()
        self.text_ctrl_key5.Hide()
        self.label_5.Hide()
        self.text_ctrl_key6.Hide()
        self.static_line_key.Hide()
        self.button_add_key.Hide()
	self.Layout()

    def fill_current_keys(self):
	if (self.ActivedCompanyID):
		self.key1 = self.__supported_company[(self.ActivedCompanyID)][0]
		self.key2 = self.__supported_company[(self.ActivedCompanyID)][1]
		self.key3 = self.__supported_company[(self.ActivedCompanyID)][2]
		self.key4 = self.__supported_company[(self.ActivedCompanyID)][3]
		self.key5 = self.__supported_company[(self.ActivedCompanyID)][4]
		self.key6 = self.__supported_company[(self.ActivedCompanyID)][5]

    def get_currentLicenseString(self):
	if (self.ActivedCompanyID):
		self.button_input.SetLabel(_("reimport"))
		self.currentLicense = "%s-%s-%s-%s-%s-%s" \
		%(self.__supported_company[(self.ActivedCompanyID)][0],\
		  self.__supported_company[(self.ActivedCompanyID)][1],\
		  self.__supported_company[(self.ActivedCompanyID)][2],\
		  self.__supported_company[(self.ActivedCompanyID)][3],\
		  self.__supported_company[(self.ActivedCompanyID)][4],\
		  self.__supported_company[(self.ActivedCompanyID)][5])
	else:
		self.currentLicense = _("<Not imported yet!>")

    def update_licenseInfo(self):
	self.get_currentLicenseString()
	if self.UUIDmatch:
		TextuuidMatched=_("Active")
	else:
		TextuuidMatched=_("inActive!")
	if self.ActivedCompanyID:
		companyText = self.__supported_company[self.ActivedCompanyID][6]
	else:
		companyText = _("None user")
	self.licenseMessage=_("\n Registered with: %s\n\n Lincensed to: \n\t%s\n\n  Status: %s") \
		   %(self.currentLicense, companyText, TextuuidMatched)
	self.label_licenseInfo.SetLabel(self.licenseMessage)
	self.label_current_key.SetLabel(_("Current key:%s") %(self.currentLicense))

    def verify_current_license(self):
	#node = uuid.getnode()
	#macUUID = uuid.UUID(int=node)
	#macstr = macUUID.hex[-12:]
	macstr = self.GetMac()
 	
	if not self.ActivedCompanyID:
		self.UUIDmatch = 0
		return -1

	# date = key2 - 'Y''S'
	date_int = (int(self.key2,16)-int(self.key3,16))&0xfff
	date_str = "%04x" %(date_int)
	if date_str[0]:
		uuidplus_char1 = date_str[0]
	else:
		uuidplus_char1 = "0"
	uuidplus_str1 = "%s%s%s" %(uuidplus_char1,uuidplus_char1,uuidplus_char1)
	if date_str[1]:
		uuidplus_char2 = date_str[1]
	else:
		uuidplus_char2 = "0"
	uuidplus_str2 = "%s%s%s" %(uuidplus_char2,uuidplus_char2,uuidplus_char2)
	if date_str[2]:
		uuidplus_char3 = date_str[2]
	else:
		uuidplus_char3 = "0"
	uuidplus_str3 = "%s%s%s" %(uuidplus_char3,uuidplus_char3,uuidplus_char3)
	if date_str[3]:
		uuidplus_char4 = date_str[3]
	else:
		uuidplus_char4 = "0"
	uuidplus_str4 = "%s%s%s" %(uuidplus_char4,uuidplus_char4,uuidplus_char4)

	# calculate uuid from given key
	given_uuidstr = "%s%s%s" %(self.key4,self.key5,self.key6)
	given_uuidstrp1 = given_uuidstr[0:3]
	given_uuidstrp2 = given_uuidstr[3:6]
	given_uuidstrp3 = given_uuidstr[6:9]
	given_uuidstrp4 = given_uuidstr[9:12]

	given_keyuuid1 = (int(given_uuidstrp1,16)-int(uuidplus_str1,16))&0xfff 
	given_keyuuid2 = (int(given_uuidstrp2,16)-int(uuidplus_str2,16))&0xfff 
	given_keyuuid3 = (int(given_uuidstrp3,16)-int(uuidplus_str3,16))&0xfff
	given_keyuuid4 = (int(given_uuidstrp4,16)-int(uuidplus_str4,16))&0xfff

	given_uuid = "%03x%03x%03x%03x" %(given_keyuuid1,given_keyuuid2,given_keyuuid3,given_keyuuid4)

	# OK ,let's have a rest. 
	if (int(given_uuid,16) == int(macstr,16)):
		self.UUIDmatch = 1
	else:
		self.UUIDmatch = 0
	
    def GetMac(self):
	remac_posix=re.compile('HWaddr.*?([\w]{2}:[\w]{2}:[\w]{2}:[\w]{2}:[\w]{2}:[\w]{2})')
	remac_posix_spliter=":"
	remac_nt=re.compile('Physical Address.*?([\w]{2}-[\w]{2}-[\w]{2}-[\w]{2}-[\w]{2}-[\w]{2})')
	remac_nt_spliter="-"
	if os.name == 'nt':
		try:
			ret = ''
			CmdLine = 'ipconfig /all'
			r = os.popen(CmdLine).read()
			if r:
				L = remac_nt.findall(r)
				if len(L) > 0:
					ret = L[0]
				ret = ret.split(remac_nt_spliter)
				ret=''.join(ret)
		except:
			pass
	elif os.name == "posix":
		try:
			ret = ''
			CmdLine = 'ifconfig'
			r = os.popen(CmdLine).read()
			if r:
				L = remac_posix.findall(r)
				if len(L) > 0:
					ret = L[0]
				ret = ret.split(remac_posix_spliter)
				ret=''.join(ret)
		except:
			pass
	else:
		pass
	return ret
# end of class LicenseManager

