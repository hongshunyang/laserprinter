# -*- coding: iso-8859-15 -*-
# vim:set et sts=4 sw=4:
# generated by wxGlade 0.6.3 on Thu Jun 17 13:44:35 2010

import wx
import sys,os,gettext
import wx.html
import threading

#sys.path.append("../module")

import Syncer
import Image_array_creator

from prefer import preferencesFrame
from LicenseManager import LicenseManager
from Settings import LPGlobalData
from misc import lpMisc

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade


class HtmlFrameWindow(wx.Frame):
    def __init__(self, parent, title, frameSize, htmlURL):
        wx.Frame.__init__(self, parent, -1, title, size=frameSize)
        html = wx.html.HtmlWindow(self)
        wx.CallAfter(html.LoadPage,htmlURL)
        
class HtmlAboutWindow(wx.Dialog):
    def __init__(self, title, frameSize, htmlURL):
        wx.Dialog.__init__(self, None, -1, title, size=frameSize)
        htmlwin = wx.html.HtmlWindow(self)
        wx.CallAfter(htmlwin.LoadPage,htmlURL)
        self.okbutton = wx.Button(self, wx.ID_OK,_("&OK"))
        about_dlg_sizer = wx.BoxSizer(wx.VERTICAL)
        about_dlg_sizer.Add(htmlwin, 1, wx.EXPAND|wx.ALL, 5)
        about_dlg_sizer.Add(self.okbutton, 0, wx.ALIGN_CENTER|wx.ALL, 5)
        self.SetSizer(about_dlg_sizer)
        self.Layout()
        self.Center()
   
class LPFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: LPFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
	# locale
	self.lpglobaldata=LPGlobalData()
	if self.lpglobaldata.Language == 1:
		basedir=os.getcwd()
		print "base dir is %s" %basedir
		localedir=os.path.join(basedir,"data/locale")
		gettext.install('LaserPrinter',localedir,unicode=True)
		gettext.translation('LaserPrinter',localedir,languages=["zh_CN"]).install(True)
	
        self.sizer_info_staticbox = wx.StaticBox(self, -1, _("Info"))
        self.sizer_control_staticbox = wx.StaticBox(self, -1, _("Mover Control"))
        self.sizer_manufacture_staticbox = wx.StaticBox(self, -1, _("Manufacture"))
        self.sizer_picture_staticbox = wx.StaticBox(self, -1, _("Picture"))
	
	# license Managment
	self.sys_license_actived = 0
	self.licenseWindow = LicenseManager()
	if (self.lpglobaldata.LicenseRegistered):
		self.licenseWindow.ActivedCompanyID = self.lpglobaldata.LicenseRegistered
	# update license Message
	self.licenseWindow.fill_current_keys()
	self.licenseWindow.get_currentLicenseString()
	self.licenseWindow.verify_current_license()
	self.licenseWindow.update_licenseInfo()
	if self.licenseWindow.UUIDmatch:
		self.sys_license_actived = 1
	else:
		self.sys_license_actived = 0
		
        
        # Menu Bar
        self.LPframe_menubar = wx.MenuBar()
        self.menuFile = wx.Menu()
        self.mnitm_Open = wx.MenuItem(self.menuFile, wx.ID_OPEN, _("&Open picture"), _("Open picture file"), wx.ITEM_NORMAL)
        self.menuFile.AppendItem(self.mnitm_Open)
        self.menuFile.AppendSeparator()
        self.mnitm_Exit = wx.MenuItem(self.menuFile, wx.ID_EXIT, _("E&xit"), _("Quit"), wx.ITEM_NORMAL)
        self.menuFile.AppendItem(self.mnitm_Exit)
        self.LPframe_menubar.Append(self.menuFile, _("&File"))
        self.menuPreferences = wx.Menu()
        self.mnitm_Setup = wx.MenuItem(self.menuPreferences, wx.ID_PREFERENCES, _("&Setup"), _("System Setup"), wx.ITEM_NORMAL)
        self.menuPreferences.AppendItem(self.mnitm_Setup)
        self.LPframe_menubar.Append(self.menuPreferences, _("&Preferences"))
        self.menuHelp = wx.Menu()
        self.mntim_HelpContents = wx.MenuItem(self.menuHelp, wx.ID_HELP, _("&Contents"), _("Help contents"), wx.ITEM_NORMAL)
        self.menuHelp.AppendItem(self.mntim_HelpContents)
        self.menuHelp.AppendSeparator()
        self.LicenseManage = wx.MenuItem(self.menuHelp, wx.ID_ANY, _("License"), _("License Management"), wx.ITEM_NORMAL)
        self.menuHelp.AppendItem(self.LicenseManage)
        self.menuAbout = wx.MenuItem(self.menuHelp, wx.ID_ABOUT, _("A&bout"), _("About the program"), wx.ITEM_NORMAL)
        self.menuHelp.AppendItem(self.menuAbout)
        self.LPframe_menubar.Append(self.menuHelp, _("&Help"))
        self.SetMenuBar(self.LPframe_menubar)
        # Menu Bar end
        self.LPframe_statusbar = self.CreateStatusBar(1, 0)
        
        # Tool Bar
        self.LPframe_toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL|wx.TB_DOCKABLE|wx.TB_HORZ_LAYOUT)
        self.SetToolBar(self.LPframe_toolbar)
        self.LPframe_toolbar.AddLabelTool(wx.ID_OPEN, _("Open"), wx.Bitmap("data/img/file-open.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, _("Open picture"), _("Open picture file for made"))
        self.LPframe_toolbar.AddSeparator()
        self.LPframe_toolbar.AddLabelTool(wx.ID_PREFERENCES, _("Setup"), wx.Bitmap("data/img/settings.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, _("System setup"), _("System setup for various parameters"))
        self.LPframe_toolbar.AddSeparator()
        self.LPframe_toolbar.AddLabelTool(wx.ID_EXIT, _("Quit"), wx.Bitmap("data/img/exit.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, _("Quit"), _("Quit the programe"))
        # Tool Bar end
        self.panel_picture = wx.Panel(self, -1)
        self.PicInfo = wx.StaticText(self, -1, _("Picture info:"))
        self.label_pic_info_text = wx.StaticText(self, -1, "")
        self.static_line_info = wx.StaticLine(self, -1)
        self.SysInfo = wx.StaticText(self, -1, _("system info"))
        self.label_sys_info_text = wx.StaticText(self, -1, "")
        self.button_init = wx.Button(self, -1, _("Initialize"))
        self.static_line_ctrl = wx.StaticLine(self, -1)
        self.ManualCtrl = wx.StaticText(self, -1, _("Manual Control"))
        self.label_axis_X = wx.StaticText(self, -1, _("axisX:"))
        self.text_ctrl_X_increament = wx.TextCtrl(self, -1, "")
        self.button_Xincrease = wx.Button(self, -1, _("+"))
        self.button_XgoBack = wx.Button(self, -1, _("<"))
        self.button_XgoAhead = wx.Button(self, -1, _(">"))
        self.label_axis_Y = wx.StaticText(self, -1, _("axisY:"))
        self.text_ctrl_Y_increament = wx.TextCtrl(self, -1, "")
        self.button_Yincrease = wx.Button(self, -1, _("+"))
        self.button_YgoBack = wx.Button(self, -1, _("<"))
        self.button_YgoAhead = wx.Button(self, -1, _(">"))
        self.label_progress = wx.StaticText(self, -1, _("Progress:"))
        self.gauge_sysProgress = wx.Gauge(self, -1, 10)
        self.button_Action = wx.ToggleButton(self, -1, _("Manualfacture"))
	self.button_Stop = wx.Button(self,-1,_("Reset"))
	self.button_GetPosition = wx.Button(self,-1,_("GetPosition"))


        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.evt_OnOpenPic, self.mnitm_Open)
        self.Bind(wx.EVT_MENU, self.evt_OnExit, self.mnitm_Exit)
        self.Bind(wx.EVT_MENU, self.evt_OnSysSetup, self.mnitm_Setup)
        self.Bind(wx.EVT_MENU, self.evt_OnHelpContents, self.mntim_HelpContents)
        self.Bind(wx.EVT_MENU, self.evt_OnAbout, self.menuAbout)
        self.Bind(wx.EVT_MENU, self.evt_OnLicenseManage, self.LicenseManage)
        self.Bind(wx.EVT_BUTTON, self.evt_On_MoverInit, self.button_init)
        self.Bind(wx.EVT_TEXT_ENTER, self.evt_OnXincrementEnter, self.text_ctrl_X_increament)
        self.Bind(wx.EVT_TEXT, self.evt_OnXincrement, self.text_ctrl_X_increament)
        self.Bind(wx.EVT_BUTTON, self.evt_OnXincrease, self.button_Xincrease)
        self.Bind(wx.EVT_BUTTON, self.evt_OnXgoBack, self.button_XgoBack)
        self.Bind(wx.EVT_BUTTON, self.evt_OnXgoAhead, self.button_XgoAhead)
        self.Bind(wx.EVT_TEXT_ENTER, self.evt_OnYincrementEnter, self.text_ctrl_Y_increament)
        self.Bind(wx.EVT_TEXT, self.evt_OnYincrement, self.text_ctrl_Y_increament)
        self.Bind(wx.EVT_BUTTON, self.evt_OnYincrease, self.button_Yincrease)
        self.Bind(wx.EVT_BUTTON, self.evt_OnYgoBack, self.button_YgoBack)
        self.Bind(wx.EVT_BUTTON, self.evt_OnYgoAhead, self.button_YgoAhead)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.evt_OnAction, self.button_Action)
	self.Bind(wx.EVT_BUTTON, self.evt_On_ActionStop, self.button_Stop)
	self.Bind(wx.EVT_BUTTON, self.evt_On_GetPosition, self.button_GetPosition)

        # end wxGlade

        # prefer dialog and global data
        self.Myimg_width=0
        self.Myimg_height=0
        self.loaded_picture = 0
        self.update_information_text()
        
	#syncer
	self.swust_syncer = Syncer.Syncer()
	self.swust_syncer.Shutter.Serial_Parameter['port']=self.lpglobaldata.ComPort_string
	self.mover_init_success = 0
	self.syncer_init_success = 0

	
	#timer progress guage
	self.timer_count=0
	self.timer=wx.Timer(self,1)
	self.Bind(wx.EVT_TIMER,self.evt_refresh_guage,self.timer)

        # create a thread for action stuff
        self.action_thread = threading.Thread(target=self.action_stuff)
	# ok , start the syncer and shutter threads. but, u need to close flag first!
	self.swust_syncer.action_flag = 0
	self.thread_shutter_started = 0
	self.thread_syncer_started = 0
	
	# init shutter
        self.shutter_init_sccess = 0
	ret = self.swust_syncer.Shutter_init()
        if not ret:
            self.shutter_init_sccess = 1

        # end class LPFrame

    def __set_properties(self):
        # begin wxGlade: LPFrame.__set_properties
        self.SetTitle(_("Laser printer of SWUST"))
        self.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        self.LPframe_statusbar.SetStatusWidths([-1])
        # statusbar fields
        LPframe_statusbar_fields = [_("LPframe_statusbar")]
        for i in range(len(LPframe_statusbar_fields)):
            self.LPframe_statusbar.SetStatusText(LPframe_statusbar_fields[i], i)
        self.LPframe_toolbar.SetToolBitmapSize((16, 15))
        self.LPframe_toolbar.Realize()
        self.panel_picture.SetMinSize((240, 220))
        self.button_init.SetMinSize((120, 28))
        self.button_Xincrease.SetMinSize((28, 28))
        self.button_XgoBack.SetMinSize((28, 28))
        self.button_XgoAhead.SetMinSize((28, 28))
        self.button_Yincrease.SetMinSize((28, 28))
        self.button_YgoBack.SetMinSize((28, 28))
        self.button_YgoAhead.SetMinSize((28, 28))
	self.button_GetPosition.SetMinSize((100,28))
        self.gauge_sysProgress.SetMinSize((200, 28))
        
        # Set default value for X and Y increament:
        self.text_ctrl_X_increament.SetValue("0")
        self.text_ctrl_Y_increament.SetValue("0")
        self.button_Action.SetValue(0)
        self.button_GetPosition.Disable()
 

        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: LPFrame.__do_layout
        grid_sizer_main = wx.GridSizer(2, 2, 0, 0)
        sizer_manufacture = wx.StaticBoxSizer(self.sizer_manufacture_staticbox, wx.VERTICAL)
        sizer_control = wx.StaticBoxSizer(self.sizer_control_staticbox, wx.VERTICAL)
        sizer_man_control = wx.BoxSizer(wx.VERTICAL)
        sizer_man_control_y = wx.BoxSizer(wx.HORIZONTAL)
        sizer_man_control_x = wx.BoxSizer(wx.HORIZONTAL)
        sizer_info = wx.StaticBoxSizer(self.sizer_info_staticbox, wx.VERTICAL)
        sizer_sysinfo = wx.BoxSizer(wx.VERTICAL)
        sizer_pic_info = wx.BoxSizer(wx.VERTICAL)
        sizer_picture = wx.StaticBoxSizer(self.sizer_picture_staticbox, wx.VERTICAL)
        sizer_picture.Add(self.panel_picture, 1, wx.ALL|wx.EXPAND, 2)
        grid_sizer_main.Add(sizer_picture, 3, wx.ALL|wx.EXPAND, 4)
        sizer_pic_info.Add(self.PicInfo, 0, 0, 0)
        sizer_pic_info.Add(self.label_pic_info_text, 0, wx.EXPAND, 0)
        sizer_info.Add(sizer_pic_info, 1, wx.ALL|wx.EXPAND, 2)
        sizer_info.Add(self.static_line_info, 0, wx.ALL|wx.EXPAND, 4)
        sizer_sysinfo.Add(self.SysInfo, 0, 0, 0)
        sizer_sysinfo.Add(self.label_sys_info_text, 0, wx.EXPAND, 0)
        sizer_info.Add(sizer_sysinfo, 2, wx.ALL|wx.EXPAND, 2)
        grid_sizer_main.Add(sizer_info, 1, wx.ALL|wx.EXPAND, 4)
        sizer_control.Add(self.button_init, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 15)
        sizer_control.Add(self.static_line_ctrl, 0, wx.EXPAND, 0)
        sizer_control.Add(self.ManualCtrl, 0, wx.TOP|wx.ALIGN_CENTER_HORIZONTAL, 10)
        sizer_man_control_x.Add(self.label_axis_X, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_man_control_x.Add(self.text_ctrl_X_increament, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_man_control_x.Add(self.button_Xincrease, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_man_control_x.Add((28, 28), 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_man_control_x.Add(self.button_XgoBack, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_man_control_x.Add(self.button_XgoAhead, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_man_control.Add(sizer_man_control_x, 1, wx.EXPAND, 0)
        sizer_man_control_y.Add(self.label_axis_Y, 0, wx.LEFT, 10)
        sizer_man_control_y.Add(self.text_ctrl_Y_increament, 0, 0, 0)
        sizer_man_control_y.Add(self.button_Yincrease, 0, 0, 0)
        sizer_man_control_y.Add((28, 28), 0, 0, 0)
        sizer_man_control_y.Add(self.button_YgoBack, 0, 0, 0)
        sizer_man_control_y.Add(self.button_YgoAhead, 0, 0, 0)
        sizer_man_control.Add(sizer_man_control_y, 1, wx.EXPAND, 0)
        sizer_control.Add(sizer_man_control, 1, wx.EXPAND, 0)
	sizer_control.Add(self.button_GetPosition,0,wx.ALIGN_CENTER_HORIZONTAL,0)
        grid_sizer_main.Add(sizer_control, 1, wx.ALL|wx.EXPAND, 4)
        sizer_manufacture.Add(self.label_progress, 0, wx.LEFT|wx.TOP, 42)
        sizer_manufacture.Add(self.gauge_sysProgress, 0, wx.LEFT|wx.RIGHT|wx.BOTTOM|wx.ALIGN_CENTER_HORIZONTAL, 20)
        sizer_manufacture.Add(self.button_Action, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 24)
        sizer_manufacture.Add(self.button_Stop, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 10)
        grid_sizer_main.Add(sizer_manufacture, 1, wx.ALL|wx.EXPAND, 4)
        self.SetSizer(grid_sizer_main)
        grid_sizer_main.Fit(self)
        self.Layout()
        self.Centre()
        # end wxGlade

    # Error dialog
    def has_error_dialog(self,errmessage):
	self.error_dlg=wx.MessageDialog(None,errmessage,_("Error!"),wx.OK|wx.ICON_ERROR)
        self.LPframe_statusbar.SetStatusText(errmessage)
	self.error_dlg.ShowModal()

    # Open A picture file
    def evt_OnOpenPic(self, event):
        
        dialog=wx.FileDialog(None,_("Open  picture file"),\
           wildcard="All files(*.*)|*.*|BMP file(*.bmp)|*.bmp|jpg file(*.jpeg)|*.jpeg\
           |png file(*.png)|*.png|gif (*.gif)|*.gif",style=wx.OPEN)

        if dialog.ShowModal()==wx.ID_OK:
        	self.filePath=dialog.GetPath()
          	dialog.Destroy()
          	self.Myimg = wx.Image(self.filePath, wx.BITMAP_TYPE_ANY)
          	
          	# Scale the original to another wx.Image
          	self.Myimg_width = self.Myimg.GetWidth()
          	self.Myimg_height = self.Myimg.GetHeight()

		# system maxium picture size
		sys_step_length = float(self.lpglobaldata.StepLength)
		sys_max_width = 100/sys_step_length
		sys_max_heigth = 30/sys_step_length

		# Check the image width and height
		if (self.Myimg_width > sys_max_width) or (self.Myimg_width > sys_max_heigth):
			error_message=_("Error: Your picture should nerver biger than %s by %s pixel accroding to the current system step length and mover limits!") %(sys_max_width,sys_max_heigth)
			self.has_error_dialog(error_message)
			return -1
          	
		# make sure picture scaled to fit the panel
          	self.pic_panel_width,self.pic_panel_height=self.panel_picture.GetSize()
          	self.scaledWidth,self.scaledHeight=self.Myimg_width,self.Myimg_height
       
          	
          	# Note: must scale picture carefully
          	if (self.Myimg_width > self.pic_panel_width) or (self.Myimg_height > self.pic_panel_height):
          		if  self.Myimg_width > self.Myimg_height:
          			self.scaledWidth=self.pic_panel_width
          			self.scaledHeight=self.pic_panel_width*self.Myimg_height/self.Myimg_width
          		elif self.Myimg_width < self.Myimg_height:
					self.scaledHeight=self.pic_panel_height
					self.scaledWidth=self.pic_panel_height*self.Myimg_width/self.Myimg_height
          		else:
          			self.scaledWidth=self.pic_panel_width
          			self.scaledHeight=self.pic_panel_height
          	else:
          		self.scaledWidth=self.Myimg_width
          		self.scaledHeight=self.Myimg_height
          	
          	self.Myimg = self.Myimg.Scale(self.scaledWidth,self.scaledHeight)
		# Set white mask for manuafacture image
		self.Myimg_ready = self.Myimg
		#self.Myimg_ready.SetMaskColour(255,255,255)
		self.Myimg_ready.SaveFile("temp/file_load.png",wx.BITMAP_TYPE_PNG)
          	self.PicBackGround = wx.Image("data/img/panel_bg.png",wx.wx.BITMAP_TYPE_PNG)
          	self.bg_staticBitmap = wx.StaticBitmap(self.panel_picture, -1, \
          								wx.BitmapFromImage(self.PicBackGround))
          	
          	# Convert to static bitmap
          	self.Myimg_staticBitmap = wx.StaticBitmap(self.panel_picture, -1, \
          								wx.BitmapFromImage(self.Myimg))
          	# and put them into the sizer
          	self.Myimg_bitmap_sizer = wx.BoxSizer(wx.VERTICAL)
          	self.Myimg_bitmap_sizer.Add(self.bg_staticBitmap)
          	self.Myimg_bitmap_sizer.Add(self.Myimg_staticBitmap)
		self.Refresh()
          	          	
     		#image array creation
     		self.swust_im=Image_array_creator.IAC("temp/file_load.png")
		self.swust_im.create_array()

                self.loaded_picture = 1

                # Set guage range
		self.gauge_sysProgress.SetRange(self.Myimg_width*self.Myimg_height)

                # update sys info
          	self.update_information_text()
						
    def update_information_text(self):
          	# display the picture information in picinfo statictext
          	text_width=_("Width(in pixel):")
          	text_height=_("Height(in pixel):")
                if self.Myimg_width and self.Myimg_height:
          	        text_picture_info="  %s %s\n  %s %s\n" %(text_width,self.Myimg_width,\
          		        text_height,self.Myimg_height)
                else:
                        text_picture_info=_(" <Picture not loaded in.>")
          	self.label_pic_info_text.SetLabel(text_picture_info)
          	
          	
          	# displayer System information
          
          	self.stepLength=float(self.lpglobaldata.StepLength)

		# TODO: speed by pixel
		if (float(self.lpglobaldata.Vscaning)/float(self.stepLength)>1000):
			warn_dialog = wx.MessageDialog(None,_("Warning: Your scaning velocity is too big according to the current steplength,You may get the wrong time about processing!"),\
				_("Warning"),wx.OK|wx.ICON_WARNING)
			warn_dialog.ShowModal()
							
                # 0.06196 is the comunication time by one pixel
                self.speed_for_once_comunicate = 0.06196
          	self.speed_scanning_pixel = self.stepLength/float(self.lpglobaldata.Vscaning)
          	self.speed_by_pixel = self.speed_scanning_pixel+ self.speed_for_once_comunicate
          	try:
          		self.stepLength=float(self.stepLength)
          		self.real_width=self.stepLength*self.Myimg_width
          		self.real_height=self.stepLength*self.Myimg_height

                        # calculate time about working.
                        if (self.loaded_picture):
                            self.swust_im.calculate_steps()
                            self.have_data_time = self.swust_im.have_data_counts*self.speed_by_pixel
                            self.null_data_Nstep_time = self.swust_im.stepN_total*self.speed_scanning_pixel + \
                                    self.swust_im.stepN_counts*self.speed_for_once_comunicate
                            self.null_data_10Nstep_time = self.swust_im.step10N_total*(self.stepLength/10) + \
                                    self.swust_im.step10N_counts*self.speed_for_once_comunicate
                            print "1:%f" %(self.have_data_time)
                            print "0 <10%f" %(self.null_data_Nstep_time)
                            print "0 >10%f" %(self.null_data_10Nstep_time)
                            # we calc. time in 3 parts
          		    self.about_time = self.have_data_time + self.null_data_Nstep_time + self.null_data_10Nstep_time
                        else:
                            self.about_time = 0


          		self.current_velocity=self.lpglobaldata.Vscaning
          		self.about_time=lpMisc().sec2time(self.about_time)
          		
          		# Text label for sysinfo
          		text_stepLength=_("sys stepLength(mm):")
          		text_real_width=_("Real width(mm):")
          		text_real_height=_("Real height(mm):")
          		text_current_velocity=_("Current velocity(mm/s):")
          		text_about_time=_("About time:")
                        text_mirror_X=_("whether X axis:")

                        if (self.lpglobaldata.WhetherMirrorX):
                            text_Xmirror = _("mirror")
                        else:
                            text_Xmirror = _("normal")
                        text_mirror="%s %s" %(text_mirror_X,text_Xmirror)
          	
          		text_sys_info=" %s\n %s  %s\n %s  %s\n %s  %s\n %s  %s\n %s  %s\n" \
          		  	%(text_mirror,text_stepLength,self.stepLength,\
          		    text_real_width,self.real_width,\
          		    text_real_height,self.real_height,\
          		    text_current_velocity,self.current_velocity,\
          		    text_about_time,self.about_time)
          		self.label_sys_info_text.SetLabel(text_sys_info)
        	except ValueError:
        		errDialog = self.has_error_dialog(_("Error: step Length value is not valid!"))
          	
    def evt_OnExit(self, event):
    #TODO: save configurations and destroy all frame then Exit!
    #BUG: global data actually not saved.
	self.lpglobaldata.SaveCfg()
	try:
		self.swust_syncer.Shutter.close()
		self.swust_syncer.Shutter.disconnect()
	except:
		self.has_error_dialog(_("Error occured when shutting down shutter!"))
	# self.Destroy will not save data,USE Close instead!
	self.Close()
	sys.exit()
	
    def evt_OnSysSetup(self, event):
        self.PreferDialog = preferencesFrame(None,self.swust_syncer.Shutter,self.lpglobaldata)
        self.PreferDialog.ShowModal()
        self.update_information_text()

    def evt_OnHelpContents(self, event):
        htmlContents = HtmlFrameWindow(None,_("Help contents"),\
        frameSize=(480,600),htmlURL="data/html/help.html")
        htmlContents.Show()

    def evt_OnAbout(self, event):
        htmlAbout = HtmlAboutWindow(_("About the program"),\
        frameSize=(570,320),htmlURL="data/html/about.html")
        htmlAbout.Show()

    def evt_OnLicenseManage(self, event):

	if (self.lpglobaldata.LicenseRegistered):
		self.licenseWindow.ActivedCompanyID = self.lpglobaldata.LicenseRegistered
	# update license Message
	self.licenseWindow.fill_current_keys()
	self.licenseWindow.get_currentLicenseString()
	self.licenseWindow.verify_current_license()
	self.licenseWindow.update_licenseInfo()
	self.licenseWindow.ShowModal()
	# Save the Actived ID
	self.lpglobaldata.LicenseRegistered = self.licenseWindow.ActivedCompanyID
	self.lpglobaldata.SaveCfg()
	if self.licenseWindow.UUIDmatch:
		self.sys_license_actived = 1
	else:
		self.sys_license_actived = 0
	

    def evt_On_MoverInit(self, event): 		
        self.LPframe_statusbar.SetStatusText(_("Try to init XPS-C8 motion controller..."))
	self.button_init.SetLabel(_("initializing"))
	# set parameters before init
	self.swust_syncer.Shutter.Serial_Parameter['port']=self.lpglobaldata.ComPort_string
	# syncer initialize
	# Mover
	ret=self.swust_syncer.initialize()
	if (ret == -1):
        	self.has_error_dialog(_("Error: Can not connect to XPS-C8!"))
	        self.button_init.SetLabel(_("Initialize"))
		return -1
	elif (ret == -2):
		# Waring to status bar
		self.has_error_dialog(_("Warning: error occured while initializing XPS-C8!"))
	        self.button_init.SetLabel(_("Initialize"))
                return -2

	# Mover init success
	self.mover_init_success=1
        msg_dialog = wx.MessageDialog(None,_("XPS-C8 init success!"),_("Info"),wx.OK|wx.ICON_INFORMATION)
        msg_dialog.ShowModal()
	
	# sys init complete
	self.LPframe_statusbar.SetStatusText(_("XPS-C8 initialized!"))
	self.button_init.SetLabel(_("Initialize"))
	self.syncer_init_success=1
	self.button_GetPosition.Enable()
		

    def syncer_move_manual(self,increment):
	if not self.mover_init_success:
		self.has_error_dialog(_("Error:Mover not initialized!"))
		return -1
	self.swust_syncer.XPSC8_mover.sys_velocity=float(self.lpglobaldata.Vmanual)
	self.swust_syncer.XPSC8_mover.set_velocity_acceleration()
	ret=self.swust_syncer.XPSC8_mover.move(increment)


    def evt_OnXincrementEnter(self, event):
    	#TODO: Nothing here now!
        event.Skip()

    def evt_OnXincrement(self, event):
        self.CurrentXincrementValue=self.text_ctrl_X_increament.GetValue()
        event.Skip()

    def evt_OnXincrease(self, event):
    	# Read the X increment and then actions.
        self.CurrentXincrementValue=self.text_ctrl_X_increament.GetValue()
        try:
        	x=float(self.CurrentXincrementValue)
		self.syncer_move_manual([x,0])
        except ValueError:
        	self.has_error_dialog(_("Error: input is not valid value"))


    def evt_OnXgoBack(self, event): 
	self.syncer_move_manual([-1,0])

    def evt_OnXgoAhead(self, event): 
	self.syncer_move_manual([1,0])

    def evt_OnYincrementEnter(self, event):
    	#TODO: Nothing here now!
        event.Skip()

    def evt_OnYincrement(self, event):
        #TODO: Nothing here!
        event.Skip()

    def evt_OnYincrease(self, event):
    	 # Read the Y increment and then actions.
        self.CurrentYincrementValue=self.text_ctrl_Y_increament.GetValue()
        try:
        	y=float(self.CurrentYincrementValue)
		self.syncer_move_manual([0,y])
        except ValueError:
        	self.has_error_dialog(_("Error: input is not valid value"))
        

    def evt_OnYgoBack(self, event): 
	self.syncer_move_manual([0,-1])

    def evt_OnYgoAhead(self, event):
	self.syncer_move_manual([0,1])

    def evt_On_GetPosition(self, event):
        if (self.syncer_init_success):
	    print "Get position!"
	    ret=self.swust_syncer.XPSC8_mover.mover.GroupPositionCurrentGet(\
		    self.swust_syncer.XPSC8_mover.mover.socketId,"XY",2)
            print ret
	    current_position_x = ret[1]
	    current_position_y = ret[2]
	    position_message_target = "X: %f Y: %f" %(current_position_x,current_position_y)
	    position_message = "%s %s" %(_("Current position:"),position_message_target)
            msg_dialog = wx.MessageDialog(None,position_message,_("Info"),wx.OK|wx.ICON_INFORMATION)
            msg_dialog.ShowModal()
        else:
	    self.has_error_dialog(_("Error:Mover not initialized!"))



    def evt_refresh_guage(self,event):
	self.gauge_sysProgress.SetValue(self.swust_syncer.progress)
	self.timer_count=self.timer_count+1
	self.run_time=self.timer_count
	self.run_time_message=lpMisc().sec2time(self.run_time)
        progress_text=_("Progress:")
	self.run_time_message="%s %s" %(progress_text,self.run_time_message) 
        self.label_progress.SetLabel(self.run_time_message)

    def action_back_to_default(self):
	self.button_Action.SetValue(0)
	self.button_Action.SetLabel(_("Manualfacture"))

    def evt_OnAction(self, event):
        # check license
	if not self.sys_license_actived:
		self.has_error_dialog(_("System not actived yet, please check your license!"))
		self.action_back_to_default()
		return -1

    	if not (self.button_Action.GetValue()):
		#
    		# PAUSE :here to make sure everything closed!
		#
		self.swust_syncer.Shutter.close()
		self.timer.Stop()
		self.swust_syncer.action_flag=0
		print "paulse!"
		self.action_back_to_default()
		self.button_Stop.Enable()
		self.button_GetPosition.Enable()
    	else:
		#
    		# ACTION: here to action.
		#
    		self.button_Action.SetLabel(_("Pulse"))
		self.button_Stop.Disable()
		self.button_GetPosition.Disable()
    	
		# make sure syncer is initialized.
		if not self.syncer_init_success:
			self.has_error_dialog(_("Error:system not initialized!"))
			self.action_back_to_default()
			return -1

                # make sure shutter is connected!
                if not self.shutter_init_sccess:
			self.has_error_dialog(_("Can not connect shutter,please check you comport connection!"))
			self.action_back_to_default()
			return -1

                # You need to load a picture before action
                if not self.loaded_picture:
                        self.has_error_dialog(_("You need to load a picture before manualfacturing!"))
			self.action_back_to_default()
			return -1

		#shutter
		self.swust_syncer.Shutter.Serial_Parameter['port']=self.lpglobaldata.ComPort_string
		ret=self.swust_syncer.Shutter.connect()
		if ret:
			self.has_error_dialog(_("Can not connect shutter,please check you comport connection!"))
			self.action_back_to_default()
			return -1

    		#Syncer (setting velocity)
		#	set step length
    		self.stepLength=float(self.lpglobaldata.StepLength)
		self.swust_syncer.stepLength=self.stepLength
		#	Set system velocity and acceleration
		self.swust_syncer.XPSC8_mover.sys_velocity=float(self.lpglobaldata.Vscaning)
		self.swust_syncer.XPSC8_mover.set_velocity_acceleration()
                #       whether mirror X
                self.swust_syncer.WhetherMirrorX=self.lpglobaldata.WhetherMirrorX
		#	Now Action!

                # serve loop thread.
		if not self.thread_shutter_started:
			self.swust_syncer.start()
			self.thread_shutter_started = 1
		if not self.thread_syncer_started:
			self.action_thread.start()
			self.thread_syncer_started = 1
			

		#progress
                # one seconds
		self.timer.Start(1000)
                # set flags
                self.swust_syncer.completed=0
		self.swust_syncer.action_flag=1
		print "Action!"


    def action_stuff(self):
        # NEVER return in the thread serv loop!
        while(1):
	        if self.swust_syncer.action_flag:
                        if (not self.swust_syncer.completed):
                                print "scaning..."
			        ret=self.swust_syncer.syncer_running('scanning',self.swust_im.array)
			# We have trouble now !
			if (ret):
                                print "Scaning ERRR!!!"
                                # moving error
                                error_message=_("Error accured while moving,Please check the mover, you may reinit the mover before you make any futher action! Error Code: %d") %ret
			        self.has_error_dialog(error_message)

				# IMPORTANT! close everything!
				ret=self.swust_syncer.Shutter.close()
                                # shutter close error.
				if ret:
					self.has_error_dialog(_("Error accured while closing shutter!"))

				# sys back for next operation
	                        self.swust_syncer.action_flag=0
		                self.button_Stop.Enable()
		                self.button_GetPosition.Enable()
				self.action_back_to_default()




                        # if complete ?
                        if (self.swust_syncer.completed):
	                        self.swust_syncer.action_flag=0
	                        self.timer.Stop()
                                self.swust_syncer.finished_steps = 0
                                self.swust_syncer.i = 0
                                self.swust_syncer.j = 0
			        self.action_back_to_default()
	                        self.report_working_time()
                                self.timer_count = 0
	                        self.gauge_sysProgress.SetValue(0)
                                self.swust_syncer.progress = 0
		                self.button_Stop.Enable()
		                self.button_GetPosition.Enable()
                                self.swust_syncer.completed=0
                                print "Complete!"


    def evt_On_ActionStop(self, event):
	#
	# STOP: here to make sure everything closed!
	#
	self.swust_syncer.action_flag=0
	self.action_back_to_default()
	self.gauge_sysProgress.SetValue(0)
	self.swust_syncer.Shutter.close()
	self.timer.Stop()
        self.timer_count = 0
	# !!!!here we make everything back to 0
        self.swust_syncer.finished_steps = 0
        self.swust_syncer.i = 0
        self.swust_syncer.j = 0
        self.swust_syncer.progress = 0
        self.swust_syncer.completed=0
        print "Reset!"
                            
    def report_working_time(self):
	self.run_time=self.timer_count
	self.run_time_message=lpMisc().sec2time(self.run_time)
	text_workfor=_("Worked for:")
	self.run_time_message="%s %s" %(text_workfor,self.run_time_message) 
	self.run_time_messagebox=wx.MessageDialog(None,self.run_time_message,_("Message"),wx.OK)
	self.run_time_messagebox.ShowModal()

